#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: test

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      target:
        description: 'build/${target} to build'
        required: false
        default: 'sft1200' #'x86_64'
      envOverride:
        description: 'key=value,key2=value2'
        required: false
        default: ''
      config:
        description: 'config file to build'
        required: false
        default: 'config.buildinfo'
      os:
        description: 'os to use'
        required: false
        default: 'ubuntu-20.04'

env:
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  DIY_AFTER: diy-after.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai
  DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
  NOT_PUSH: ${{ secrets.NOT_PUSH }}
  envOverride: ${{ github.event.inputs.envOverride }}

jobs:
  set_matrix:
    runs-on: ${{ github.event.inputs.os }}
    outputs:
      build_repo: ${{ steps.set_matrix.outputs.matrix }}
    name: "set matrix for: ${{ github.event.inputs.target }}"

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: prinf info
      id: set_matrix
      run: |
        echo '${{ toJson(github) }}'
        pwd # /home/runner/work/Actions-OpenWrt/Actions-OpenWrt
        ls -l
        bash build/${{ github.event.inputs.target }}/set_matrix.sh

    - name: prinf set_matrix
      run: |
        echo '${{ steps.set_matrix.outputs.matrix }}'

  build:
    needs: set_matrix
    runs-on: ${{ github.event.inputs.os }}
    outputs:
      imageBuilder: ${{ steps.organize.outputs.imageBuilder }}
      build_target: ${{ steps.organize.outputs.build_target }}
    name: "编译 ${{matrix.repo.name}} for ${{matrix.target}} - config: ${{ github.event.inputs.config }}"
    strategy:
      fail-fast: false
      matrix:
        target: 
          - "${{ github.event.inputs.target }}"
        repo: ${{ fromJson(needs.set_matrix.outputs.build_repo) }}

    steps:
    - name: Checkout
      uses: actions/checkout@main

    # - name: install docker
    #   uses: docker-practice/actions-setup-docker@master
      
    - name: prinf machine info and matrix info
      run: |
        uname -a
        df -h
        lscpu
        free -h
        echo 'target: ${{ matrix.target }} ${{ toJSON(matrix.repo) }}'
        # 移动 $target ，后续步骤不记得不需要用 build/${{ github.event.inputs.target }}
        mv build/${{ github.event.inputs.target }}/* ${GITHUB_WORKSPACE}/
        \cp ${GITHUB_WORKSPACE}/build/common.buildinfo ${GITHUB_WORKSPACE}/

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |

        sudo mkdir -p /workdir 
        sudo chown $USER:$GROUPS /workdir
        git config --global user.email "action@github.com" && git config --global user.name "GitHub Action"

        # $target/init_runner.sh 设置 runner 的基础设置
        if [ -f "init_runner.sh" ];then
            bash init_runner.sh
        else
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install python3-markdown $(curl -fsSL git.io/depends-ubuntu-2004) zstd upx jq
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"

          # install github cli tool
          # gh 的 cli 用于构建缓存存储，这里加 env 判断防止 fork 的人不知道怎么设置而构建失败
          if [ -n "${{ secrets.gh_token }}" ];then
            wget -q https://github.com/cli/cli/releases/download/v2.10.1/gh_2.10.1_linux_amd64.tar.gz
            tar zxf gh_*_linux_amd64.tar.gz
            find gh_* -type f -name gh -exec mv {} /usr/local/bin/ \;
            rm -rf gh_*linux*
            sudo chmod a+x /usr/local/bin/gh
            gh auth login --with-token <<< ${{ secrets.gh_token }}
          fi
          if command -v docker &>/dev/null && [ -n "${DOCKER_PASS}" ];then
            docker login -u ${{ github.repository_owner }} -p ${DOCKER_PASS}
          fi
        fi
        # 设置一些 condition 给后续步骤作为判断条件或者执行的值
        # 以及一些 shell
        bash env.sh
        # name-branch-target
        echo "cache_name=$( echo ${{ matrix.repo.name }}-${{ matrix.repo.branch }}-${{ matrix.target }} | awk -F/ '{print $NF}' )" >> $GITHUB_ENV

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        # 有些 target clone 行为是自定义的，并不是克隆就完事了
        if [ -f "${GITHUB_WORKSPACE}/clone.sh" ];then
            bash ${GITHUB_WORKSPACE}/clone.sh
        else
          #git clone $REPO_URL -b $REPO_BRANCH openwrt
            git clone ${{ matrix.repo.addr }} -b ${{ matrix.repo.branch }} openwrt
            ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
            echo "BaseDir=/workdir/openwrt" >> $GITHUB_ENV
        fi
        cd ${BaseDir}
        readlink -f $GITHUB_WORKSPACE/openwrt
        ls -l . $GITHUB_WORKSPACE/openwrt/

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        if [ -f "$DIY_P1_SH" ];then
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH
        fi

    - name: Update feeds
      if: env.UdateFeeds == 'true'
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      if: env.InstallFeeds == 'true'
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        # set -x
        [ -e files ] && mv files openwrt/files
        export CONFIG=${{ github.event.inputs.config }}
        echo "use the .config file:" "${CONFIG}"
        cp config/${CONFIG} openwrt/.config
        cp common.buildinfo openwrt/

        # feeds 后做些修改
        chmod +x $DIY_P2_SH
        pushd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        popd

        if [ "$UseCache" = true -a -n "${{ secrets.gh_token }}" ];then
            gh release -R ${GITHUB_REPOSITORY} list | grep -Ew cache || gh release -R ${GITHUB_REPOSITORY} create cache -t '' -n ''
            gh release -R ${GITHUB_REPOSITORY} view cache 2>/dev/null | grep -Po 'asset:\s+\K\S+' > /tmp/log || true
            if grep -E "${cache_name}.img.zst" /tmp/log;then
              gh release -R ${GITHUB_REPOSITORY} download cache -p "${cache_name}.img.zst.*"
              cat ${cache_name}.img.zst.* | zstdmt -d -o ${cache_name}.img
              rm -f ${cache_name}.img.zst.*
            else
              truncate -s 30g ${cache_name}.img && mkfs.btrfs -M ${cache_name}.img
              NO_CACHE=1
              echo "NO_CACHE=1" >> $GITHUB_ENV
            fi
            LOOP_DEVICE=$(losetup -f) && echo "LOOP_DEVICE=$LOOP_DEVICE" >> $GITHUB_ENV
            sudo losetup -P --direct-io $LOOP_DEVICE ${cache_name}.img
            mkdir cache && sudo mount -o nossd,compress=zstd $LOOP_DEVICE cache
            sudo chown -R $USER:$GROUPS cache
            # https://forum.openwrt.org/t/using-precompiled-toolchain/87446/6
            #mkdir -p cache/{build_dir,staging_dir,tmp} openwrt/{build_dir,staging_dir,tmp}
            mkdir -p cache/{build_dir,staging_dir} openwrt/{build_dir,staging_dir}
            (
              if [ "$NO_CACHE" != 1 ];then
                cd cache
                find build_dir/{host*,toolchain-*} -name .built\* -exec touch {} \;
                touch staging_dir/{host*,toolchain-*}/stamp/.*
                ls -l {staging_dir,build_dir}/{host,hostpkg}
              fi
            )
            sudo mount --bind cache/build_dir    openwrt/build_dir
            sudo mount --bind cache/staging_dir  openwrt/staging_dir
            # sudo mount --bind cache/tmp          openwrt/tmp
            
        fi
        # 有缓存存在才构建 imageBuilder，否则第一次生成缓存可能会很久甚至失败，此刻构建 imageBuilder 没有意义
        if grep -Eq '^CONFIG_IB=y'  openwrt/.config && [ "$NO_CACHE" != 1 ];then
            pushd openwrt
            cp .config config.buildinfo
            sed_num=$( grep -n '$(TOPDIR)/.config' target/imagebuilder/Makefile | cut -d: -f1 )
            sed -ri ${sed_num}'{s#cp#& -a $(TOPDIR)/files $(TOPDIR)/*.buildinfo#;s#.config$##;}' target/imagebuilder/Makefile
            if [ "${{ matrix.repo.name }}" == lede ];then
              find package/ -type d -name luci-app-* | awk -F/ '{printf "CONFIG_PACKAGE_%s=m\n",$NF}' >> .config
            fi
            #sed -ri 's#(^CONFIG_PACKAGE_luci-app-[^A-Z]*=)y#\1m#' .config
            sed -ri '/CONFIG_PACKAGE_[0-9a-z-]+(=| )/{s@^#\s+@@;s@(=y|\s+is not set)@=m@}' .config
            popd
        fi
        if [ ! -f 'openwrt/config.buildinfo' ];then
          cp openwrt/.config openwrt/config.buildinfo
        fi
        # TODO:
        # 根目录的 common.buildinfo 暂时包含了 docker，后续应该最小化到运维工具
        # 目前 sft1200 会提前清空该文件不走下面逻辑
        if [ -s 'openwrt/common.buildinfo' ];then
          sed -n '/---/,$p' openwrt/common.buildinfo >> openwrt/.config
          sed -n '/---/,$p' openwrt/common.buildinfo >> openwrt/config.buildinfo
        fi

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        # 压缩所有
        sed -ri 's@^#\s(CONFIG_.+?_UPX) is not set@\1=y@' .config
        make defconfig
        
        # 开启 imagebuilder 的话 保留一个.config.bak 给非 slim 使用
        if grep -Eq '^CONFIG_IB=y' .config;then
          echo 'MAKE_OPTS=IGNORE_ERRORS=1' >> $GITHUB_ENV
          if [ "$NO_CACHE" != 1 ];then
            mv .config config.slim
            cat config.buildinfo > .config
            make defconfig
            cp .config full.buildinfo # 非slim的文件
            cat config.slim > .config
            # sed -ri '/option check_signature/s@option@#&@' ./package/system/opkg/Makefile
          else
            # 如果初次没缓存，只编译基础的
            cat common.buildinfo > .config
            make defconfig
            sed -ri '/^CONFIG_PACKAGE_luci-app-[0-9a-z-]+=y/{s@^@# @;s@=y@ is not set@}' .config
            make defconfig
          fi
        else
          echo 'MAKE_OPTS=' >> $GITHUB_ENV
        fi

        if [ "$MakeDownload" == true ];then
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
        fi
        cat .config
        if grep -q '^CONFIG_TARGET.*DEVICE.*=y' .config;then
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        else
          echo "${{ matrix.target }}" > DEVICE_NAME
        fi
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        ls -al ${BaseDir}

    - name: Upload buildInfo
      uses: actions/upload-artifact@main
      if: '!cancelled()'
      with:
        name: openwrt-buildInfo-${{ env.DEVICE_NAME }}-${{ env.cache_name }}
        # https://github.com/actions/upload-artifact/issues/92
        path: |
          ${{ env.BaseDir }}/.config
          ${{ env.BaseDir }}/*.buildinfo

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        if [ "${AutoBuildTimeOut}" == true ] ;then
          createdAt=$(gh -R ${GITHUB_REPOSITORY}  run list --json databaseId,createdAt --jq ".[]|select(.databaseId==${{ github.run_id }})|.createdAt")
          usedSec=$(( `date +%s` - `date -d "$createdAt" +%s`  ))
          # 6小时超时，减去上传 cache 预留的 10 分钟后的时间作为 timeout 时间
          timeoutSec=$(( 6*60*60 - 10*60 - $usedSec  ))
          # 初次没缓存用 timeout 后防止超时 action ，后面会上传缓存目录
          echo timeout $timeoutSec make -j$(nproc) $MAKE_OPTS
          if ! timeout $timeoutSec make -j$(nproc) $MAKE_OPTS;then
            # timeout 超时是 124 返回码
            makeExit=$?
            echo "timeout make exitcode: $makeExit"
            if [ $makeExit -ne 0 -a $makeExit -ne 124 ];then
              echo 'failed: try to V=s'
              make -j1 || make -j1 V=s
            fi
          fi
        else
          make -j$(nproc) || make -j1 || make -j1 V=s
        fi
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: |
        df -hT
        df -i
        ls -la openwrt/
        #ls -lh openwrt/bin/targets/*/* # 有时候是目录 openwrt/bin/targets/*
        # 所以用下面定位目录
        ls -lh $(dirname $(find openwrt/bin/targets/ -type d -name packages ))
        if [ -f diy-after-compile.sh ];then
          bash diy-after-compile.sh
        fi

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd $(dirname $(find openwrt/bin/targets/ -type d -name packages ))
        pwd
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

        # 下面 outputs 是后面上传 imageBuidler 的判断条件和名字
        if ls *-imagebuilder-* &>/dev/null;then
          echo "::set-output name=imageBuilder::openwrt-imagebuilder-${{ env.DEVICE_NAME }}-${{ matrix.repo.name }}-${{ matrix.repo.branch }}"
        fi
        echo "::set-output name=build_target::${{ matrix.target }}"

    # - name: Do something after Compile
    #   if: steps.organize.outputs.status == 'success' && !cancelled()
    #   run: |
    #     cd openwrt
    #     if [ -f "$GITHUB_WORKSPACE/$DIY_AFTER" ];then
    #       bash $GITHUB_WORKSPACE/$DIY_AFTER
    #     fi

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with: # 上传固件
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}-${{ matrix.repo.name }}-${{ matrix.repo.branch }}
        path: |
          ${{ env.FIRMWARE }}
          !${{ env.FIRMWARE }}/openwrt-imagebuilder*

    - name: Upload imagebuilder tar.xz
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.imageBuilder && !cancelled()
      with: # 上传 imageBuilder
        name: openwrt-imagebuilder-${{ env.DEVICE_NAME }}-${{ matrix.repo.name }}-${{ matrix.repo.branch }}
        path: ${{ env.FIRMWARE }}/*-imagebuilder*

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Clean space for upload cache
      id: up_cache_before
      if: "!cancelled() && env.ClearPkg == 'true'"
      continue-on-error: true
      run: |
        sync
        pushd $(dirname $(find openwrt/bin/targets/ -type f -name sha256sums ))
        if ls *-imagebuilder-* &>/dev/null;then
          # 清理下，防止此步上传超时
          rm -rf openwrt-*
        fi
        popd
        rm -rf openwrt/dl/ # 防止 action 里 inode 太多报错容量不够

        echo "Listing 100 largest packages"
        dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
        df -h
        echo "Removing large packages"
        sudo apt-get remove -y '^ghc-8.*' || true
        sudo apt-get remove -y '^dotnet-.*' || true
        sudo apt-get remove -y '^llvm-.*' || true
        sudo apt-get remove -y 'php.*' || true
        sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel || true
        sudo apt-get autoremove -y || true
        sudo apt-get clean || true
        df -h
        df -i
    - name: Upload cache to release
      id: up_cache
      if: '!cancelled()'
      continue-on-error: true
      run: |
        if [ "${UseCache}" == true -a -n "${{ secrets.gh_token }}" ];then
          #sudo umount openwrt/{build_dir,staging_dir,tmp} cache
          # https://unix.stackexchange.com/questions/18048/list-only-bind-mounts
          for path in `sudo findmnt --kernel -n --list | grep '\[' | awk -vWorkDir="$GITHUB_WORKSPACE"  '($2 ~ WorkDir"/cache/" && $1 ~ WorkDir"/openwrt/"){print $1}'`;do
            sudo umount $path
          done
          sudo umount cache

          #sudo losetup -l -O NAME -n | awk '$0~"/${cache_name}.img"{print $1}' | xargs -r sudo losetup -d
          sudo losetup -l -O NAME -n | awk '$0~"/'${cache_name}'.img"{print $1}' | xargs -r sudo losetup -d
          sleep 2
          sync
          zstdmt -c --long ${cache_name}.img | split --numeric=1 -b 2000m - ${cache_name}.img.zst.
          ls -l
          rm -f ${cache_name}.img # 减少容量
          gh release -R ${GITHUB_REPOSITORY} upload cache ${cache_name}.img.zst.* --clobber
        fi

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_slim:
    needs: [set_matrix, build]
    if: needs.build.outputs.imageBuilder
    runs-on: ${{ github.event.inputs.os }}
    name: "编译 repo: ${{matrix.repo.name}} - ${{matrix.target}}"
    strategy:
      fail-fast: false
      matrix:
        target: 
          - "slim"
          - "full"
        repo: ${{ fromJson(needs.set_matrix.outputs.build_repo) }}
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: install docker
      uses: docker-practice/actions-setup-docker@master
      
    - name: prinf info
      run: |
        df -h
        lscpu
        free -h
        echo 'target: ${{matrix.target}}'

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install python3-markdown $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        i=0
        while [ "$i" -le 100 ];do
          if command -v docker &>/dev/null && [ -n "${DOCKER_PASS}" ];then
            docker info | grep -wq 'zhangguanzhang'  || docker login -u zhangguanzhang -p ${DOCKER_PASS}
            docker login -u zhangguanzhang@qq.com -p ${DOCKER_PASS} registry.aliyuncs.com
            [ "$?" -eq 0 ] && break || lei i++
          fi
        done
        docker info

    - name: Download imagebuilder (Artifact)
      uses: actions/download-artifact@v2
      with:
        name: ${{ needs.build.outputs.imageBuilder }}
        path: .

    - name: Compile the firmware
      id: compile
      run: |
        ls -l
        \cp -a ${GITHUB_WORKSPACE}/build/${{ needs.build.outputs.build_target }}/* ${GITHUB_WORKSPACE}/build/common.buildinfo ${GITHUB_WORKSPACE}/
        tar xf openwrt-imagebuilder-*.tar.xz
        rm -f openwrt-imagebuilder-*.tar.xz
        ln -sf openwrt-imagebuilder-* openwrt
        cd openwrt-imagebuilder-*
        ls -l

        echo -e "$(nproc) thread compile"
        ls -1 packages/*.ipk | wc -l
        ls packages/

        > /tmp/log
        if [ "${{matrix.target}}" == 'slim' ];then
          mkdir -p files/local_feed && sudo mount --bind packages files/local_feed
          echo "suffix=-slim" >> $GITHUB_ENV
        else
          echo "suffix=-full" >> $GITHUB_ENV
        fi

        sed -i 's/luci-app-[^ ]*//g' include/target.mk $(find target/ -name Makefile)
        ls packages/*.ipk | xargs -n1 basename > package.list
        #PACKAGES=$(grep -v CONFIG_PACKAGE_luci-app common.buildinfo | grep -Po '^CONFIG_PACKAGE_\K[^A-Z=]+(?==y)' | xargs -n1 -i grep -o {} package.list | sort -u | xargs echo )
        #extra_pkgs="luci-i18n-base-zh-cn luci-i18n-firewall-zh-cn luci-app-ttyd bash default-settings luci-app-docker -luci-app-ssr-plus -luci-app-samba"

        extra_pkgs=" -luci-app-ssr-plus -luci-app-samba"
        if [ "${{matrix.target}}" == 'slim' ];then
          PACKAGES=$( grep -Po '^CONFIG_PACKAGE_\K[^A-Z=]+' common.buildinfo | tr '\n' ' ' )
        else
          PACKAGES=$( grep -Po '^CONFIG_PACKAGE_\K[^A-Z=]+(?==y)' full.buildinfo | xargs -n1 -i grep -o {} package.list | awk '!a[$0]++' | xargs echo )
        fi
        make image PACKAGES="$PACKAGES ${extra_pkgs}" FILES="files" |& tee -a /tmp/log
        REMOVE_PKGS=$( grep -Po 'Cannot install package \K[^.]+' /tmp/log | awk '{printf "-%s ",$0}' )
        if [ -n "$REMOVE_PKGS" ];then
          echo "打包报错，已下包存在依赖问题: ${REMOVE_PKGS}"
          echo "尝试移除上面的包打包"
          # 不删除则会文件已存在而不更新签名，貌似这样也解决不了。。,后面改 sed -ri '/check_signature/s@^[^#]@#&@' /etc/opkg.conf 暂时屏蔽前面错误
          rm -f files/local_feed/Packages*
          make image PACKAGES="$PACKAGES ${extra_pkgs} ${REMOVE_PKGS}" FILES="files"
        fi

        #make image -j$(nproc) PACKAGES='-luci-app-ipsec-vpnd' || make image -j1 V=s PACKAGES='-luci-app-ipsec-vpnd' 

        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt-imagebuilder-*/bin/targets/*/*
        pwd
        ls -lh
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Do something after Compile
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt-imagebuilder-*/
        if [ -f "$GITHUB_WORKSPACE/$DIY_AFTER" ];then
          bash $GITHUB_WORKSPACE/$DIY_AFTER ${{ matrix.repo.name }}-${{ matrix.repo.branch }} ${{ env.suffix }} 
        fi

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}${{ env.suffix }}-${{ matrix.repo.name }}-${{ matrix.repo.branch }}
        path: |
          ${{ env.FIRMWARE }}
